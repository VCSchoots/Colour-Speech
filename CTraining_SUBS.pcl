######################## CONDITION INFO SUBS ##############################


################################################### 

#-----------------------------Wait------------------------------------
sub Wait(int dur_wait2) begin
   time_wait = clock.time();
   loop until clock.time() >= time_wait + dur_wait2
   begin end;
end;

#-----------------------------Wait FromTo------------------------------------
sub WaitFromTo(int time_point, double dur_wait2) begin
   time_wait = time_point;
   loop until clock.time() >= time_wait + dur_wait2
   begin end;
end;

#-----------------------------Wait for a certain button to be pressed------------------------------------
sub WaitForButtonpress( int button ) begin
    
   loop count_old = response_manager.total_response_count(button)
   until response_manager.total_response_count(button) > count_old
   begin end;
   
end;

#-------------Get Info--------------------------
# this is our subroutine to ask interactively for any information we want
sub GetInfo ( string sInputstr )
begin
	t_info1.set_caption ( sInputstr );
	t_info1.redraw();
	t_info2.set_caption ( " " );
	t_info2.redraw();
	
	p_info.present();
	
	system_keyboard.set_case_mode( 3 );                    # Capital letters also possible
	sInfo = system_keyboard.get_input( p_info, t_info2 ); # Using backspace key possible
end;

#--------------------------Get Subj Info: -------------------------------------

# this routine is useful when several subjects get the same list or when you want to add special subject info to your logfile
sub Get_subj_info(string inpstr1) begin

	t_info1.set_caption(inpstr1);
	t_info1.redraw();
	p_info.present();
	system_keyboard.set_case_mode(3);                       # Capital letters possible
	SubjID = system_keyboard.get_input( p_info, t_info2 ); # Using backspace key possible

end;

#-------------CircleColours--------------------------
# this is our subroutine to calculate the colour inputs necessary to make a [colour]/grey stimulus
sub array < double,1 > CircleColours ( array< double,1 >& clr, array< double,1 >& bkg)
begin
	array<double> CLR[6];# Array to be filled with {red background, red amplitude, g backgr, g amp, b backgr, b amp}
	CLR[1] = (clr[1] + bkg[1])/ 2.0;# red channel background (difference between brightest and darkest halved)
	CLR[2] = (clr[1] - bkg[1])/ 2.0;# red channel amplitude (average of brightest and darkest)
	CLR[3] = (clr[2] + bkg[2])/ 2.0;# green backgr (same thing, but inverted so that the period is inverse to that of the red channel)
	CLR[4] = (clr[2] - bkg[2])/ 2.0;# green amp
	CLR[5] = (clr[3] + bkg[3])/ 2.0;# blue
	CLR[6] = (clr[3] - bkg[3])/ 2.0;# blue
	return CLR
end;

#----------------------------- Concentric circles ------------------------------------
sub conCirc( array< graphic_surface, 1 > surfaces ) begin
	loop int j = 1 until j == 3 begin # Do this twice
		if direction == 1 then
			# putting the inward circles in the picture and presenting them
			loop int i = 1 until i > surfaces.count()
			begin
				pic.set_part( 1, surfaces[i] );
				trial1.present();
				wait_interval(20);
				i = i + 1;
			end;
		elseif direction == 2 then	
			# putting the outward circles in the picture and presenting them
			loop int i = 1 until i > surfaces.count()
			begin
				pic.set_part( 1, surfaces[surfaces.count()+1 - i] );
				trial1.present();
				wait_interval(20);
				i = i + 1;
			end;
		end;
	j = j + 1;	
	end;
end;

############################ Input File ####################

sub 
	array< double,2 > InputfileHandling ( string sFilename )
begin
	array<string> inputlines[0]; 
	# inputfile opening and storing of contents in separate lines
	InputFile.open ( "Logfiles\\" + sFilename + "_eqLum.txt");
	InputFile.set_delimiter ( '\n' );

	iLines = 0;
	
	loop
	until InputFile.end_of_file() || !InputFile.last_succeeded()
	begin
		iLines = iLines + 1;
		inputlines.add( InputFile.get_line() );
	end;

	if !InputFile.last_succeeded() then
		term.print("Error while reading!\n" );
	elseif !InputFile.end_of_file() then
		term.print("Exceeding capacity!\n"  );
	end;

	InputFile.close();
	
	# take only the info from the last 8 lines in case there were earlier participants written to this file
	array<string> colourStrings[0];
	colourStrings.add(inputlines[iLines-6]);#bright green
	colourStrings.add(inputlines[iLines-4]);#bright red
	colourStrings.add(inputlines[iLines-2]);#dark green
	colourStrings.add(inputlines[iLines]);#dark red
	
	array<string> bgstring[3];
	array<string> brstring[3];
	array<string> dgstring[3];
	array<string> drstring[3];
	
	colourStrings[1].split( "\t", bgstring );
	colourStrings[2].split( "\t", brstring );
	colourStrings[3].split( "\t", dgstring );
	colourStrings[4].split( "\t", drstring );
	
	array<double> colourValues[4][3];
	colourValues[1][1] = double( bgstring[1] );
	colourValues[1][2] = double( bgstring[2] );
	colourValues[1][3] = double( bgstring[3] );
	colourValues[2][1] = double( brstring[1] );
	colourValues[2][2] = double( brstring[2] );
	colourValues[2][3] = double( brstring[3] );
	colourValues[3][1] = double( dgstring[1] );
	colourValues[3][2] = double( dgstring[2] );
	colourValues[3][3] = double( dgstring[3] );
	colourValues[4][1] = double( drstring[1] );
	colourValues[4][2] = double( drstring[2] );
	colourValues[4][3] = double( drstring[3] );
	return colourValues;

end;

########################### Eyetracker calibration #####################

sub eyeCalib begin# not logged in main log, but in Presentation standard log and in the eye tracker log.
	
	text_eyetr.present();
	
	int counter = 1;
	
	loop until counter > xarray.count()
	begin
		
		cross.set_part_x(1, xarray[counter]);
		cross.set_part_y(1, yarray[counter]);
		
		cross.set_part_x(2, xarray[counter]);
		cross.set_part_y(2, yarray[counter]);
		
		countStr = string( counter );
		newEvCode = evCode;
		newEvCode.append( countStr );# the event code for the Presentation log file is set to "calibr_cross1", "calibr_cross2", etc.)
		crossevent.set_event_code(newEvCode);
		crossevent.set_port_code(counter);# the code that is sent to the output port (eyetracker) is set to the cross nr. (1 = middle, 2 = left top, etc.)
		
		eyetrial.present();
		
		counter = counter + 1;
	end;

end;

############################ Scanner countdown #######################   

# present a countdown screen and print the time of the 31st scan trigger to Log file

sub countdown( string sFilename) begin
	
	
	t_countdown.set_caption( "Wachten op de scanner...\n " );
	t_countdown.redraw();
	p_countdown.present();

	int mri_pulse_wait = 30;
	
	if ispilot then
		mri_pulse_wait = 2; # number of MRI pulses to wait
	end;
	
	int pulses = pulse_manager.main_pulse_count();
	
	loop
		int pulsecount = 1;
	until pulsecount > mri_pulse_wait+1 begin # +1 because it breaks out of the loop as soon as the last number is on screen
		if (pulse_manager.main_pulse_count() > pulses) then # as soon as another pulse is sent
			pulses = pulse_manager.main_pulse_count();
			if pulsecount <= mri_pulse_wait then # as long as the coutner is not at 1 yet
				t_countdown.set_caption("Wachten op de scanner...\n" + string( mri_pulse_wait+1 - pulsecount) );
				t_countdown.redraw();
				p_countdown.present();
			elseif pulsecount > mri_pulse_wait then #when the counter is at 1, do not flash a 0 before moving on
			end;
			pulsecount = pulsecount + 1;
		end;
	end;
	
	int time = pulse_manager.main_pulse_time( pulses );
	
   string sOutputLine = "";

	sOutputLine.append(sListNR + "\t");     #write participant nr followed by a tab
	sOutputLine.append("FirstVolume\t");     #write first volume followed by 8 tabs
	sOutputLine.append("\t\t\t\t\t\t\t");
	sOutputLine.append(string( time ) + "\t\t\n");#write the clock time directly after the 31st pulse, two empty fields and a return
	
   ofile1.open_append( sFilename );      # don't overwrite file, if it already exists, but open to append!
	ofile1.print(sOutputLine);        	# log start time after MRI pulse
   ofile1.close();
end;


############################ LOGFILE #######################   

#----------------------------------------------------------------------------------------------------------
sub WriteHeader ( string sFilename) 
begin

	string sOutputLine = "";
	sOutputLine.append("SubjID");   
	sOutputLine.append("\t");	
	sOutputLine.append("TrialNr");   
	sOutputLine.append("\t");	
	sOutputLine.append("Color");   
	sOutputLine.append("\t");	
	sOutputLine.append("BlockNr");   
	sOutputLine.append("\t");	
	sOutputLine.append("RunNr");   
	sOutputLine.append("\t");		
	sOutputLine.append("Direction");   
	sOutputLine.append("\t");
	sOutputLine.append("ResponseExpected");   
	sOutputLine.append("\t");
	sOutputLine.append("ResponseGiven");   
	sOutputLine.append("\t");
	sOutputLine.append("Correct");   
	sOutputLine.append("\t");	
	sOutputLine.append("CircleStartTime");   
	sOutputLine.append("\t");
	sOutputLine.append("CircleEndTime");   
	sOutputLine.append("\t");
	sOutputLine.append("CircleDuration");   
	sOutputLine.append("\n");

   ofile1.open_append( sFilename );      # don't overwrite file, if it already exists, but open to append!
   ofile1.print( sOutputLine );          # create header of output file
   ofile1.close();
   ofile1.close();
end;

#-----------------------------WriteOutput-------------------

sub WriteOutput( string sFilename ) 
begin

   string sOutputLine = "";

	sOutputLine.append(SubjID);     #write contents of variables followed by a tab 
	sOutputLine.append("\t");
	sOutputLine.append(string(nr_trials));     
	sOutputLine.append("\t");	
	sOutputLine.append(miniblock);     
	sOutputLine.append("\t");
	sOutputLine.append(string(blocknr));     
	sOutputLine.append("\t");
	sOutputLine.append(string(runnr));     
	sOutputLine.append("\t");	
	sOutputLine.append(string(direction));     
	sOutputLine.append("\t");	
	sOutputLine.append(string(ExpectedResponse));     
	sOutputLine.append("\t");	
	sOutputLine.append(string(Response));     
	sOutputLine.append("\t");
	sOutputLine.append(string(correct));     
	sOutputLine.append("\t");
	sOutputLine.append(string(circle_start_time));     
	sOutputLine.append("\t");
	sOutputLine.append(string(circle_end_time));   
	sOutputLine.append("\t");  
	sOutputLine.append(string(circle_end_time-circle_start_time));     
	sOutputLine.append("\n");

   ofile1.open_append( sFilename );      # don't overwrite file, if it already exists, but open to append!
   ofile1.print( sOutputLine );          # create header of output file
   ofile1.close();

end;

#-----------------------------Collect response-------------------

sub collectResponse begin
	
	if response_manager.total_response_count(button_yes) > count_old_yes && response_manager.total_response_count(button_no) == count_old_no then
		Response = 1; # response is yes
	elseif response_manager.total_response_count(button_no) > count_old_no && response_manager.total_response_count(button_yes) == count_old_yes then
		Response = 0; # response is no
	elseif (response_manager.total_response_count(button_yes) == count_old_yes) && (response_manager.total_response_count(button_no) == count_old_no)then 
		Response = -1; # record no response given 
	else # multiple responses given, this means that the last response of multiple responses is registered
		if response_manager.last_response() == 2 then
			Response = 1; # response is yes
		elseif  response_manager.last_response()  == 3 then
			Response = 0; # response is no
		end;
	end;	
	
end;

#-----------------------------Show blocks and miniblocks-------------------

sub showMiniBlock begin
	
	loop int i = 1 until i > 4  # show 4 trials per miniblock
	begin
		
		# Save number of responses before circle begins
		count_old_yes = response_manager.total_response_count(button_yes);
		count_old_no = response_manager.total_response_count(button_no);
		
		circle_start_time = clock.time();
		
		direction = random(1,2);	# direction picked randomly, like B&H
		
		if miniblock == "greenlight" then
			conCirc( brightgreensurfaces );
		elseif miniblock == "redlight" then	
			conCirc( brightredsurfaces );
		elseif miniblock == "greendark" then	
			conCirc( darkgreensurfaces );			
		elseif miniblock == "reddark" then	
			conCirc( darkredsurfaces );
		end;
		
		circle_end_time = clock.time();
		
		collectResponse(); # This only registers the -last- answer that was given during presentation of the circle
		
		nr_trials = nr_trials + 1;
		
		# fixation cross between trials
		fixation_cross.present();
		Wait(1000);
			
		if colourOld == miniblock && directionOld == direction then
			ExpectedResponse = 1 # same trial as last trial, one back answer should be yes
		else
			ExpectedResponse = 0; # trial is different from last trial, answer should be no
		end;
		
		# Check if answer was correct
		if Response == ExpectedResponse then
			correct = 1;
		else
			correct = 0;
		end;		
		
		colourOld = miniblock; # save trial for one back task
		directionOld = direction; # save trial for one back task
		
		# Write current trial to output, training trials are not written to file
		if TrialType == "E" then
			WriteOutput(outputfilename);
		end;
		
		i = i + 1;
	end;
	
end;

sub showBlock begin
	# present 32 miniblocks [8*4 miniblock types]
	
	int numBlock;
	int numMiniBlock;
	
	if ispilot then
		numBlock = 1;
	else
		numBlock = 8;
	end;
	
	loop int j = 1 until j > numBlock 
	begin
	
		miniblocks.shuffle();
		
		loop until miniblocks[1] != lastminiblock begin # this is to make sure miniblock don't repeat
			miniblocks.shuffle();
		end;
		
		if ispilot then
			numMiniBlock = 1;
		else
			numMiniBlock = miniblocks.count();
		end;
		
		loop int i = 1 until i > numMiniBlock
		begin
			miniblock = miniblocks[i];
	
			showMiniBlock();
		
			lastminiblock = miniblock;
	
			i = i + 1;
			
			blocknr = blocknr + 1;
		end;
		
	j = j + 1;
	end;
end;

################# training sub #################
sub training begin
	
	bool contTraining = true;
	
	TrialType = "T";
	
	# Training instructions
	p_training.present(); 
	WaitForButtonpress( button_yes );
	
	
	# repeat training until subject chooses to go on to experiment
	loop until contTraining == false begin

	# actual training block
	miniblock = "greenlight";
	showMiniBlock();
	miniblock = "reddark";
	showMiniBlock();
	
		# Ask if training should be continued
		p_trainingCont.present(); 
		
		# Loop to determine answer (yes or no)
		count_old_yes = response_manager.total_response_count(button_yes);
		count_old_no = response_manager.total_response_count(button_no);
		
		loop until response_manager.total_response_count(button_yes) > count_old_yes || response_manager.total_response_count(button_no) > count_old_no
		begin
			if response_manager.total_response_count(button_yes) > count_old_yes then
				contTraining = true;
			elseif response_manager.total_response_count(button_no) > count_old_no then
				contTraining = false;
			end;	
		end;
	end;	

	
	p_training_end.present(); 		
	WaitForButtonpress( button_enter );# wait for experimenter to continue
	TrialType = "E";# from now on the rials are Experiment trials, and should be written to log.

end;

#######################final screen############################                                                       

sub EndFinalScreen begin
	
	# Show thank you/experiment is over screen and wait for button press (enter)
	p_end_1.present();
	WaitForButtonpress( button_enter );
end;  
