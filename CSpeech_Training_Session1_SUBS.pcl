######################## CONDITION INFO SUBS ##############################


################################################### 

#-----------------------------Wait------------------------------------
sub Wait(int dur_wait2) begin
   time_wait = clock.time();
   loop until clock.time() >= time_wait + dur_wait2
   begin end;
end;

#-----------------------------Wait FromTo------------------------------------
sub WaitFromTo(int time_point, double dur_wait2) begin
   time_wait = time_point;
   loop until clock.time() >= time_wait + dur_wait2
   begin end;
end;

#-----------------------------Wait for a certain button to be pressed------------------------------------
sub WaitForButtonpress( int button ) begin
    
   loop count_old = response_manager.total_response_count(button)
   until response_manager.total_response_count(button) > count_old
   begin end;
   
end;

#-------------Get Info--------------------------
# this is our subroutine to ask interactively for any information we want
sub GetInfo ( string sInputstr )
begin
	t_info1.set_caption ( sInputstr );
	t_info1.redraw();
	t_info2.set_caption ( " " );
	t_info2.redraw();
	
	p_info.present();
	
	system_keyboard.set_case_mode( 3 );                    # Capital letters also possible
	sInfo = system_keyboard.get_input( p_info, t_info2 ); # Using backspace key possible
end;

#--------------------------Get Subj Info: -------------------------------------

# this routine is useful when several subjects get the same list or when you want to add special subject info to your logfile
sub Get_subj_info(string inpstr1) begin

	t_info1.set_caption(inpstr1);
	t_info1.redraw();
	p_info.present();
	system_keyboard.set_case_mode(3);                       # Capital letters possible
	subj_nr = system_keyboard.get_input( p_info, t_info2 ); # Using backspace key possible

end;

#------------------checking whether an input file really exists-----------------------------------
sub CheckExistenceInputfile
begin
	
	sListNR = sInfo;
	letter = "a";
	
	array <string> letters[7] = { "a","b","c","d","e","f","g","h" };
	inputfilename = "Lists\\" + sListNR + "a.txt";
	outputfilename = "Logfiles\\" + sListNR + "a-log.txt";	
	
	# Wrong subject number entered
	loop until file_exists(stimpath + inputfilename) begin
		GetInfo("A subject code with this name doesn't exist!\nPlease try another subject code!");
		sListNR = sInfo;
		inputfilename = "Lists\\" + sListNR + "a.txt";
		outputfilename = "Logfiles\\" + sListNR + "a-log.txt";	
	end;

	# Open input file, trying different endings (a-h) until we find the one for which no log file exists yet
	loop 
	int i = 1;
	until (InputFile.open( inputfilename, false) && !file_exists(stimpath + outputfilename))
	begin
		
		if i > 7 then
			GetInfo("No files for this subject code. Enter another subject code or quit with Esc.");
			sListNR = sInfo;
			i=1;
		end;
		
		letter = letters[i];
		inputfilename = "Lists\\" + sListNR + letter + ".txt";
		outputfilename = "Logfiles\\" + sListNR + letter + "-log.txt";

		
		if !file_exists(stimpath + outputfilename) then
			break;
		end;
		
		i = i + 1;
		
	end;

	outputfilename = sListNR + letter + "-log.txt";
	
	InputFile.close();	
	
end;


#-----------------inputfile opening and reading inputfile lines-----------------------------------

sub InputfileHandling ( string sFilename )
begin
	# inputfile opening and storing of contents in separate lines
	InputFile.open ( sFilename );

	sHeader = InputFile.get_line();

	iLines = 0;

	loop
	until InputFile.end_of_file() || !InputFile.last_succeeded()
	begin
		iLines = iLines + 1;
		inputlines.add( InputFile.get_line() );
	end;

	if !InputFile.last_succeeded() then
		term.print("Error while reading!\n" );
	elseif !InputFile.end_of_file() then # if the loop before this one terminated without reaching the end of file.
		term.print("Exceeding capacity!\n"  );
	end;

	InputFile.close();

end;


#------------------splitting up inputlines in columns/fields-------------------------------------

sub InputlineSplitting
begin
	
	iLines = 1;
	term.print_line( fields.count() );
	
	loop
	until iLines > iNrTrials
	begin
		inputlines[iLines].split ( "\t", fields );		
		trial_nr.add(fields[1]);		# experimental (E) or filler (F) trial or null event (N)
		color.add(fields[2]);					# r(ed) or g(reen)
		target_pict.add(fields[3]);		# picture in BMP format (filename without extension)
		speech.add(fields[4]);		# yes or no
		jitter1.add(double(fields[5]));				# duration jitter 1
		jitter2.add(double(fields[6]));				# duration jitter 2
		jitter3.add(double(fields[7]));				# duration jitter 3	
		trial_count.add(int(fields[8]));				# trial count without null trials		
		iLines = iLines + 1;
	end;	
end;

#----------------------Input file preparation-------------------------------

sub OpenInputFile(string sInputfileInfo)
begin
	# First we ask for the number of our input file and then construct with it the input filename
	# inputfile name

	if expStarted == 0 then
		inputfilename = "Lists\\Practice.txt";
		# we check whether a file with this name exists
	else
		GetInfo( sInputfileInfo );
		sListNR = sInfo;
		inputfilename = "Lists\\" + sListNR + "a.txt";
		CheckExistenceInputfile();
	end; 
	
			
	t_info1.set_caption("Input file: "+inputfilename);
	t_info1.redraw();
	p_info.present();
	WaitForButtonpress( button_enter );
	
		
	# opening inputfile and storing lines of inputfile in an array
	InputfileHandling(inputfilename);

	# number of trials in the input file is stored
	iNrTrials = iLines;

	# splitting up inputlines in its columns/fields
	InputlineSplitting();
end;

#----------------------------- Get_sound_file (for scenarios with different WAV-files to played to the subject) ------------------------------------

sub Get_beep_file(string wav_inpstr) 
begin                
	w_beep.unload();
	wavefilename = "WAV-files\\" + wav_inpstr + ".wav";
	w_beep = new wavefile( wavefilename );
	w_beep.load();
	wav_duration = w_beep.duration();		
	s_beep = new sound (w_beep);
end;

#----------------------------- Get_bitmap_file (loads one and the same BMP-file into two different pictures) ------------------------------------
sub Get_bitmap_file(string bitmap_inpstr) # please notice: loading bitmaps might last up to 100 ms!!!
begin                
	b_target.unload();

	# Randomly choose 1 of 3 views of the object, e.g. crocodile1.jpg, but not during training
	if expStarted == 1 then
		version = random(1,3);
	elseif expStarted == 0 then
		version=1;
	end;
		
	bitmapfilename = "Pictures\\" + bitmap_inpstr + string(version) + ".jpg";	
	
	b_target.set_filename ( bitmapfilename );
	b_target.load();
end;


############################ LOGFILE #######################   

#----------------------------------------------------------------------------------------------------------
sub WriteHeader ( string sFilename) 
begin

	string sOutputLine = "";
	sOutputLine.append("SubjID");   
	sOutputLine.append("\t");
	sOutputLine.append("Task");   
	sOutputLine.append("\t");	
	sOutputLine.append("TrialNrPresentation");   
	sOutputLine.append("\t");	
	sOutputLine.append("TrialNrInputFile");   
	sOutputLine.append("\t");	
	sOutputLine.append("TrialCount");   
	sOutputLine.append("\n");	
	sOutputLine.append("Color");   
	sOutputLine.append("\t");
	sOutputLine.append("Object");   
	sOutputLine.append("\t");
	sOutputLine.append("TargetVersion");   
	sOutputLine.append("\t");	
	sOutputLine.append("speech");   
	sOutputLine.append("\t");
	sOutputLine.append("Jitter1");   
	sOutputLine.append("\t");
	sOutputLine.append("Jitter2");   
	sOutputLine.append("\t");
	sOutputLine.append("Jitter3");   
	sOutputLine.append("\t");
	sOutputLine.append("TargetOnsetTime");   
	sOutputLine.append("\n");

   ofile1.open_append( sFilename );      # don't overwrite file, if it already exists, but open to append!
   ofile1.print( sOutputLine );          # create header of output file
   ofile1.close();

end;

#-----------------------------WriteOutput-------------------

sub WriteOutput( string sFilename ) 
begin

   string sOutputLine = "";

	sOutputLine.append(sListNR);     #write contents of variables followed by a tab 
	sOutputLine.append("\t");
	sOutputLine.append(task);     
	sOutputLine.append("\t");
	sOutputLine.append(string(iLines));
	sOutputLine.append("\t");	
	sOutputLine.append(trial_nr[iLines]);
	sOutputLine.append("\t");
	sOutputLine.append(string(trial_count[iLines]));
	sOutputLine.append("\t");	
	sOutputLine.append(color[iLines]);   
	sOutputLine.append("\t");
	sOutputLine.append(target_pict[iLines]);   
	sOutputLine.append("\t");
	sOutputLine.append(bitmapfilename);   
	sOutputLine.append("\t");		
	sOutputLine.append(speech[iLines]);   
	sOutputLine.append("\t");	
	sOutputLine.append(string(jitter1[iLines]));   
	sOutputLine.append("\t");
	sOutputLine.append(string(jitter2[iLines]));   
	sOutputLine.append("\t");
	sOutputLine.append(string(jitter3[iLines]));   
	sOutputLine.append("\t");
	sOutputLine.append(string(target_onset_time));   
	sOutputLine.append("\n");

   ofile1.open_append( sFilename );      # don't overwrite file, if it already exists, but open to append!
   ofile1.print( sOutputLine );          # create header of output file
   ofile1.close();

end;

############################ TRIAL #######################   


#-----------------run trial------------------------------------

sub RunTrials begin
		
	# preloading picture 
	if ((iLines) <= iNrTrials) && (target_pict[iLines] != "na") then	
		Get_bitmap_file(target_pict[iLines] ); # loads the current bitmap 
	end;

	if (speech[iLines] == "no") && (target_pict[iLines] != "na") then	 	# no speech trial
	
		p_target.present();   
		target_onset_time = clock.time(); # measuring the target onset time always directly after presenting the picture (refresh screen issue)
		# s_beep.present(); # presenting a beep to be able to recover the target onset time in a parallely recorded WAV-file	
		WaitFromTo(target_onset_time, target_duration);
		default.present();
		
		fixation.present(); 	# jitter2 fixation cross 
		fix2_onset_time = clock.time(); 
		WaitFromTo(fix2_onset_time, (jitter2[iLines]*1000)-security);  # jitter *1000 because everything's in ms
		
	elseif speech[iLines] == "yes" then	 # speech trial

		p_target.present(); # picture presentation
		target_onset_time = clock.time();
		#s_beep.present();
		
		# record answer, not during training
		if expStarted == 1 then
			#recording.set_duration(jitter1[iLines]*1000)-security + 2000 + (jitter2[iLines]*1000)-security));
			recording.set_duration(2000);
			recording.set_base_filename("Soundfiles\\" + sListNR + "_" + letter + "_" + task + "_" +  trial_nr[iLines]  + "_" + target_pict[iLines]);
			recording.present();
		end;
		
		WaitFromTo(target_onset_time, target_duration);
		default.present();
		
		fixation.present(); # jitter1 period
		fix1_onset_time = clock.time();		
		WaitFromTo(fix1_onset_time, (jitter1[iLines]*1000)-security);
		
		cue.present(); # speech cue period
		cue_onset_time = clock.time();		
		WaitFromTo(cue_onset_time, cue_duration);
		
		fixation.present(); 	# jitter2 fixation cross 
		fix2_onset_time = clock.time(); 
		WaitFromTo(fix2_onset_time, (jitter2[iLines]*1000)-security); 
		
	elseif target_pict[iLines] == "na" then # null trials
	
		fixation.present(); 	# fixation cross 
		target_onset_time = clock.time(); # just to have something to write to the output file
		fix3_onset_time = clock.time(); 		
		WaitFromTo(fix3_onset_time, (jitter3[iLines]*1000)-security); 
		
	end;	
	
	# writing the results for all trials to the logfile, not during training
	if expStarted == 1 then
		WriteOutput(outputfilename);
	end;
	
	if mod(iLines,100) == 0 # Pause after each block of 100 items, change if you want pauses in other places
	then
		# present pause screen with instructions and how to continue
		# lasts as long as specified in INFO file
		p_pauze.present();
		Wait(pause_duration);
	end;
	
end; 

#######################final screen############################                                                       

sub EndFinalScreen begin
	
	# Show thank you/experiment is over screen and wait for button press (enter)
	p_end_1.present();
	WaitForButtonpress( button_enter );
end;  


########################## experiment ###############################
# Subroutine for looping through an input file (e.g., L01.txt) after
# training is completed.

sub runExp begin
	
	# fixation cross before first training trial	
	# lasts for 3 seconds
	fixation.present(); 
	Wait(3000); 

	# starting with the first trial
	iLines = 1; 	
	
	# loop through all trials in input file, see subroutine for details
	loop until iLines > iNrTrials begin 
		RunTrials(); 								
		iLines = iLines + 1;
	end;
	
end;

########################## training ###############################
# This is the subroutine for training OUTSIDE the scanner. Before the 
# experiment starts, Practice.txt (in Lists folder) gets called 
# automatically. Training is repeated until the subject chooses to
# quit training and start the experiment (with buttons specified 
# for "yes" (button 2) and "no" (button 3) in settings.

sub training begin
	
	expStarted = 0; # switch to tell us when training is over, needed in input file subroutine
	
	# Handling training input file
	InputfileHandling("Lists/Practice.txt");
	iNrTrials = iLines;
	
	
	#inputlines.shuffle();# only in the training BEFORE scanning, not in scanner!
	loop int i = 1; until i > iNrTrials begin
		term.print_line(inputlines[i]);
		i = i+1;
	end;
	InputlineSplitting();
	
	# Set switch to continue training as long as subject wants to
	contTraining = 1;
	
	# repeat training until subject chooses to go on to experiment
	loop until contTraining == 0 begin 
		
		# starting with the first trial
		iLines = 1; 
		
		# fixation cross before first training trial
		# lasts for 3 seconds
		fixation.present(); 	
		Wait(3000); 
		
		# present all trials in Practice.txt
		loop until iLines > (iNrTrials) begin 
			RunTrials(); 							
			iLines = iLines + 1;
		end;
		
		# present a blank screen 
		default.present(); 
		
		# Ask if training should be continued
		p_training.present(); 
		
		# Loop to determine answer (yes or no)
		count_old_yes = response_manager.total_response_count(button_yes);
		count_old_no = response_manager.total_response_count(button_no);
		
		loop until response_manager.total_response_count(button_yes) > count_old_yes || response_manager.total_response_count(button_no) > count_old_no
		begin
			if response_manager.total_response_count(button_yes) > count_old_yes then
				contTraining = 1;
			elseif response_manager.total_response_count(button_no) > count_old_no then
				contTraining = 0;
			end;	
		end;		
		
	end;
	
	expStarted = 1;

end;
