######################## CONDITION INFO SUBS ##############################


################################################### 

#-----------------------------Wait------------------------------------
sub Wait(int dur_wait2) begin
   time_wait = clock.time();
   loop until clock.time() >= time_wait + dur_wait2
   begin end;
end;

#-----------------------------Wait FromTo------------------------------------
sub WaitFromTo(int time_point, double dur_wait2) begin
   time_wait = time_point;
   loop until clock.time() >= time_wait + dur_wait2
   begin end;
end;

#-----------------------------Wait for a certain button to be pressed------------------------------------
sub WaitForButtonpress( int button ) begin
    
   loop count_old = response_manager.total_response_count(button)
   until response_manager.total_response_count(button) > count_old
   begin end;
	
end;

#-----------------------------Wait for either of two buttons to be pressed------------------------------------
sub WaitForEitherButtonpress( int button, int button2 ) begin
   
   loop
		count_old = response_manager.total_response_count(button);
		count_old2 = response_manager.total_response_count(button2)
   until
		response_manager.total_response_count(button) > count_old || response_manager.total_response_count(button2) > count_old2
   begin end;
   
end;


#-------------Get Info--------------------------
# this is our subroutine to ask interactively for any information we want
sub GetInfo ( string sInputstr )
begin
	t_info1.set_caption ( sInputstr );
	t_info1.redraw();
	t_info2.set_caption ( " " );
	t_info2.redraw();
	
	p_info.present();
	
	system_keyboard.set_case_mode( 3 );                    # Capital letters also possible
	sInfo = system_keyboard.get_input( p_info, t_info2 ); # Using backspace key possible
end;

#--------------------------Get Subj Info: -------------------------------------

# this routine is useful when several subjects get the same list or when you want to add special subject info to your logfile
sub Get_subj_info(string inpstr1) begin

	t_info1.set_caption(inpstr1);
	t_info1.redraw();
	p_info.present();
	system_keyboard.set_case_mode(3);                       # Capital letters possible
	subj_nr = system_keyboard.get_input( p_info, t_info2 ); # Using backspace key possible

end;

#-----------------inputfile opening and reading inputfile lines for training-----------------------------------

sub InputfileHandlingTrain ( string sFilename )
begin
	
	# inputfile opening and storing of contents in separate lines
	InputFile.open ( sFilename );
	InputFile.set_delimiter ( '\n' );

	sHeader = InputFile.get_line();

	iLines = 0;
	
	loop
	until InputFile.end_of_file() || iLines == NR_TRIALS || !InputFile.last_succeeded()
	begin
		iLines = iLines + 1;
		inputlines[iLines] = InputFile.get_line();
	end;

	if !InputFile.last_succeeded() then
		term.print("Error while reading!\n" );
	elseif !InputFile.end_of_file() then
		term.print("Exceeding capacity!\n"  );
	end;

	InputFile.close();

end;

#-----------------inputfile opening and reading inputfile lines for experimental task-----------------------------------

sub InputfileHandlingExp 
begin
	
	# inputfile opening and storing of contents in separate lines
	
	array<string> temp_files[0];
	string listpath = stimulus_directory + "Lists\\";
	get_directory_files( listpath, temp_files );

	term.print( temp_files );
	
	array<string> stim_files_names[0];
	loop int i = 1 until i > temp_files.count()
	begin
		string this_file = temp_files[i];
		if ( this_file.find( ".txt" ) > 0 ) then
		stim_files_names.add( this_file );
	end;
	i = i + 1;
	end;
	
	loop
		int i = 1
	until
		i > stim_files_names.count()
	begin
		string sFilename = stim_files_names[i];
		
		InputFile.open ( sFilename );
		InputFile.set_delimiter ( '\n' );

		sHeader = InputFile.get_line();
		
		iLines = 0;
		
		if sHeader != "!" then	
			
			loop
			until InputFile.end_of_file() || iLines == NR_TRIALS || !InputFile.last_succeeded()
			begin
				iLines = iLines + 1;
				inputlines[iLines] = InputFile.get_line();
			end;

			if !InputFile.last_succeeded() then
				term.print("Error while reading!\n" );
			elseif !InputFile.end_of_file() then
				term.print("Exceeding capacity!\n"  );
			end;
			
			InputFile.close();

			sFilename.split ( "\\", pathfields ); # Save list number used
			pathfields[pathfields.count()].split ( ".", filenamefields );
			ListInfo = filenamefields[1];
			
			outputfilename = sInfo + "_" + ListInfo + "_" + "log.txt"; # Save output filename

			t_info1.set_caption("Stimuluslijst: \n" + ListInfo);
			t_info1.redraw();
			p_info.present();
			WaitForButtonpress( button_enter );
		
			# Change first line to indicate that file has been used
			ofile1.open( sFilename, true );      # overwrite file
			
			if ispilot then
			else
				ofile1.print("!\n" );	
			end;
			
			ofile1.print(sHeader);
			ofile1.print("\n" );

			loop
				int j = 1;
			until
				j > iLines
			begin
				inputlines[j].split ( "\;", inputfields);
				loop int k = 1;
				until k > inputfields.count()
				begin
					ofile1.print(inputfields[k]);
					if k < inputfields.count()	then
						ofile1.print("\;" );		# 				Between every input field...
					elseif k == inputfields.count()	then# but not behind the last one.
					end;
					k = k+1;
				end;
				ofile1.print("\n" );
				j = j + 1;	
	      end;
			ofile1.close();
			
			break;
	
		else 
			InputFile.close();
			
		end;
	
		i = i + 1;
	end;

end;


#------------------splitting up inputlines in columns/fields-------------------------------------

sub InputlineSplitting
begin
	
	iLines = 1;
	
	loop
	until iLines > iNrTrials
	begin
		inputlines[iLines].split ( "\;", fields );		
		trial_nr[iLines]      = fields[1];		# experimental (E) or filler (F) trial or null event (N)
		color[iLines] = fields[2];					# r(ed) or g(reen)
		target_pict[iLines]     = fields[3];		# picture in BMP format (filename without extension)
		speech[iLines]	= fields[4];		# yes or no
		jitter1[iLines] = double(fields[5]);				# duration jitter 1
		jitter2[iLines] = double(fields[6]);				# duration jitter 2
		jitter3[iLines] = double(fields[7]);				# duration jitter 3	
		trial_count[iLines] = int(fields[8]);				# trial count without null trials		
		iLines = iLines + 1;
	end;	
end;

#----------------------Input file preparation-------------------------------

sub OpenInputFile(string sInputfileInfo)
begin
	# First we ask for the number of our input file and then construct with it the input filename
	# inputfile name

	if expStarted == 0 then
		term.print_line("ispilot: " + string(ispilot));
		if ispilot then
			inputfilename = "Lists\\PilotPractice.txt";
		else
			inputfilename = "Lists\\Practice.txt";
		end;
		
		GetInfo( sInputfileInfo );# ask for the subject code
		sListNR = sInfo;
		
		InputfileHandlingTrain(inputfilename);
	else# if expStarted == 1
		
		GetInfo( sInputfileInfo );# ask for the subject code
		sListNR = sInfo;
		
		# picking input file, opening inputfile and storing lines of inputfile in an array
		InputfileHandlingExp();
		
	end; 
			
	# number of trials in the input file is stored
	iNrTrials = iLines;

	# splitting up inputlines in its columns/fields
	InputlineSplitting();
		
end;


############ find the number associated with the current target stimulus picture ############
sub int findtargetNum( string pName ) begin
	
	int pNr = 0;
	int i=1;

	loop
	until
		i > stimuli.count()# or until found, then break
	begin
		pictName = stimuli[i].filename();
		pNr = pictName.find( pName );
		if pNr >0 then
			return i;
			break;
		end;
		
		i=i+1;
	end;
	
	return i;#never executed but code errors if not included
	
end;


#----------------------------- Get_sound_file (for scenarios with different WAV-files to played to the subject) ------------------------------------

sub Get_beep_file(string wav_inpstr) 
begin                
	w_beep.unload();
	wavefilename = "WAV-files\\" + wav_inpstr + ".wav";
	w_beep = new wavefile( wavefilename );
	w_beep.load();
	wav_duration = w_beep.duration();		
	s_beep = new sound (w_beep);
end;

#----------------------------- Get_bitmap_file (loads one and the same BMP-file into two different pictures) ------------------------------------
sub Get_bitmap_file(string bitmap_inpstr) # please notice: loading bitmaps might last up to 100 ms!!!
begin                
#	b_target.unload();

	# Randomly choose 1 of 3 views of the object, e.g. crocodile1.jpg, but not during training
	if expStarted == 1 then
		version = random(1,3);
	elseif expStarted == 0 then
		version=1;
	end;
	
	picName = bitmap_inpstr + string(version);
	bitmapfilename = "pictures\\" + bitmap_inpstr + string(version) + "_.jpg";
	
	pNum = findtargetNum( picName );

	p_target.set_part( 1, stimuli[pNum] );
#	b_target.set_filename ( bitmapfilename );
#	b_target.load();
end;


############################ LOGFILES #######################   


#----------------------------------------------------------------------------------------------------------
sub WriteHeader ( string sFilename) 
begin

	string sOutputLine = "";
	sOutputLine.append("SubjID");   
	sOutputLine.append("\t");
	sOutputLine.append("Task");   
	sOutputLine.append("\t");	
	sOutputLine.append("TrialNrPresentation");   
	sOutputLine.append("\t");	
	sOutputLine.append("TrialNrInputFile");   
	sOutputLine.append("\t");	
	sOutputLine.append("TrialCount");   
	sOutputLine.append("\t");	
	sOutputLine.append("Color");   
	sOutputLine.append("\t");
	sOutputLine.append("Object");   
	sOutputLine.append("\t");
	sOutputLine.append("TargetVersion");   
	sOutputLine.append("\t");	
	sOutputLine.append("speech");   
	sOutputLine.append("\t");
	sOutputLine.append("Jitter1");   
	sOutputLine.append("\t");
	sOutputLine.append("Jitter2");   
	sOutputLine.append("\t");
	sOutputLine.append("Jitter3");   
	sOutputLine.append("\t");
	sOutputLine.append("TargetOnsetTime");   
	sOutputLine.append("\n");

   ofile1.open_append( sFilename );      # don't overwrite file, if it already exists, but open to append!
   ofile1.print( sOutputLine );          # create header of output file
   ofile1.close();

end;

#-----------------------------WriteOutput-------------------

sub WriteOutput( string sFilename ) 
begin

   string sOutputLine = "";

	sOutputLine.append(sListNR);     #write contents of variables followed by a tab 
	sOutputLine.append("\t");
	sOutputLine.append(task);     
	sOutputLine.append("\t");
	sOutputLine.append(string(iLines));
	sOutputLine.append("\t");	
	sOutputLine.append(trial_nr[iLines]);
	sOutputLine.append("\t");
	sOutputLine.append(string(trial_count[iLines]));
	sOutputLine.append("\t");	
	sOutputLine.append(color[iLines]);   
	sOutputLine.append("\t");
	sOutputLine.append(target_pict[iLines]);   
	sOutputLine.append("\t");
	sOutputLine.append(bitmapfilename);   
	sOutputLine.append("\t");		
	sOutputLine.append(speech[iLines]);   
	sOutputLine.append("\t");	
	sOutputLine.append(string(jitter1[iLines]));   
	sOutputLine.append("\t");
	sOutputLine.append(string(jitter2[iLines]));   
	sOutputLine.append("\t");
	sOutputLine.append(string(jitter3[iLines]));   
	sOutputLine.append("\t");
	sOutputLine.append(string(target_onset_time));   
	sOutputLine.append("\n");

   ofile1.open_append( sFilename );      # don't overwrite file, if it already exists, but open to append!
   ofile1.print( sOutputLine );          # create header of output file
   ofile1.close();

end;


########################### Eyetracker calibration #####################

sub eyeCalib begin# not logged in main log, but in Presentation standard log and in the eye tracker log.
	
	text_eyetr.present();
	
	int counter = 1;
	
	loop until counter > xarray.count()
	begin
		
		cross.set_part_x(1, xarray[counter]);
		cross.set_part_y(1, yarray[counter]);
		
		cross.set_part_x(2, xarray[counter]);
		cross.set_part_y(2, yarray[counter]);
		
		countStr = string( counter );
		newEvCode = evCode;
		newEvCode.append( countStr );# the event code for the Presentation log file is set to "calibr_cross1", "calibr_cross2", etc.)
		crossevent.set_event_code(newEvCode);
		crossevent.set_port_code(counter);# the code that is sent to the output port (eyetracker) is set to the cross nr. (1 = middle, 2 = left top, etc.)
		
		eyetrial.present();
		
		counter = counter + 1;
	end;

end;

############################ Scanner countdown #######################   

# present a countdown screen and print the time of the 31st scan trigger to Log file

sub countdown( string sFilename) begin
	
	t_countdown.set_caption( "Wachten op de scanner...\n " );
	t_countdown.redraw();
	p_countdown.present();

	int mri_pulse_wait = 30;
	
	if ispilot then
		mri_pulse_wait = 2; # number of MRI pulses to wait
	end;
	
	int pulses = pulse_manager.main_pulse_count();
	
	loop
		int pulsecount = 1;
	until pulsecount > mri_pulse_wait+1 begin # +1 because it breaks out of the loop as soon as the last number is on screen
		if (pulse_manager.main_pulse_count() > pulses) then # as soon as another pulse is sent
			pulses = pulse_manager.main_pulse_count();
			if pulsecount <= mri_pulse_wait then # as long as the coutner is not at 1 yet
				t_countdown.set_caption( "Wachten op de scanner...\n" + string( mri_pulse_wait+1 - pulsecount) );
				t_countdown.redraw();
				p_countdown.present();
			elseif pulsecount > mri_pulse_wait then #when the counter is at 1, do not flash a 0 before moving on
			end;
			pulsecount = pulsecount + 1;
		end;
	end;
	
	int time = pulse_manager.main_pulse_time( pulses );
	
   string sOutputLine = "";

	sOutputLine.append(sListNR + "\t");     #write participant nr followed by a tab
	sOutputLine.append("FirstVolume\t");     #write first volume followed by 10 tabs
	sOutputLine.append("\t\t\t\t\t\t\t\t\t\t");
	sOutputLine.append(string( time ) + "\n");#write the clock time directly after the 31st pulse
	
   ofile1.open_append( sFilename );      # don't overwrite file, if it already exists, but open to append!
	ofile1.print(sOutputLine);        	# log start time after MRI pulse
   ofile1.close();
end;

############################ TRIAL #######################   

#-----------------run trial------------------------------------

sub RunTrials begin
	
	int runnr;# used during break
	int pCode;# used to define event code of the target stimulus
		
	# selecting picture 
	if ((iLines) <= iNrTrials) && (target_pict[iLines] != "na") then	
		Get_bitmap_file(target_pict[iLines] ); # loads the current bitmap 
	end;

	if (speech[iLines] == "no") && (target_pict[iLines] != "na") then	 	# no speech trial
		
		# setting the port_code (to eye tracker log) and event_code (presentation .log file)
		target_event.set_event_code( bitmapfilename );
		pCode = findtargetNum( picName );
		target_event.set_port_code( pCode );# the code that is sent to the output port (eyetracker)
		
		if expStarted == 1 && ispilot != true then
			recording.set_duration(5000);
			recording.set_base_filename("Soundfiles\\" + "nospeechtrial_" + sInfo + "_" + ListInfo + "_" + task + "_" +  trial_nr[iLines]  + "_" + target_pict[iLines]);
			recording.present(); # start recording and then immidiately start the trial
		end;
		
		trial_target.present();   
		target_onset_time = stimulus_manager.last_stimulus_data().time(); # presentation has no way to ask for the time during a trial, so just before, plus average screen refresh is the best we can do in the own logfile.
		# s_beep.present(); # presenting a beep to be able to recover the target onset time in a parallely recorded WAV-file	
		#default.present(); # I don't understand why
		
		fixation.present(); 	# jitter2 fixation cross 
		fix2_onset_time = clock.time(); 
		WaitFromTo(fix2_onset_time, (jitter2[iLines]*1000)-security);  # jitter *1000 because everything's in ms
		
	elseif speech[iLines] == "yes" then	 # speech trial
		
		# setting the port_code (to eye tracker log) and event_code (presentation .log file)
		target_event.set_event_code( bitmapfilename );
		pCode = findtargetNum( picName );
		target_event.set_port_code( pCode );# the code that is sent to the output port (eyetracker)
		
		# record answer, not during training
		if expStarted == 1 && ispilot != true then
			recording.set_duration(5000);
			recording.set_base_filename("Soundfiles\\" + "speechtrial_" + sInfo + "_" + ListInfo + "_" + task + "_" +  trial_nr[iLines]  + "_" + target_pict[iLines]);
			recording.present();
		end;
		
		trial_target.present(); # picture presentation
		target_onset_time = stimulus_manager.last_stimulus_data().time(); # presentation has no way to ask for the time during a trial, so just before, plus average screen refresh is the best we can do in the own logfile.
		#s_beep.present();
		
		#default.present(); # I don't understand why
		
		fixation.present(); # jitter1 period
		fix1_onset_time = clock.time();		
		WaitFromTo(fix1_onset_time, (jitter1[iLines]*1000)-security);
		
		trial_cue.present(); # speech cue period
		cue_onset_time = stimulus_manager.last_stimulus_data().time();		
		
		fixation.present(); 	# jitter2 fixation cross 
		fix2_onset_time = clock.time(); 
		WaitFromTo(fix2_onset_time, (jitter2[iLines]*1000)-security); 
		
	elseif target_pict[iLines] == "na" then # null trials
	
		fixation.present(); 	# fixation cross 
		target_onset_time = clock.time(); # just to have something to write to the output file
		fix3_onset_time = clock.time(); 		
		WaitFromTo(fix3_onset_time, (jitter3[iLines]*1000)-security); 
		
	end;	
	
	# writing the results for all trials to the logfile, not during training
	if expStarted == 1 then
		WriteOutput(outputfilename);
	end;
	
	if ispilot then
		breaktimes = {11,13,15};
		divBy = 1;
	else
		breaktimes = {100, 200, 300};
		divBy = 100;
	end;
	
	########## Break after each block of 100 items (but not after the 400th trial, which should be the end) ################
	if (trial_count[iLines] == breaktimes[1] || trial_count[iLines] == breaktimes[2] || trial_count[iLines] == breaktimes[3])
	then
		runnr = trial_count[iLines]/divBy;
		# present pause screen with instructions and how to continue
		
		Get_beep_file("Beep");# beep to alert experimenter
		s_beep.present();
		t_pause_1b.set_caption("Dit was blok " + string(runnr) + " van 4.");
		t_pause_1b.redraw();
		p_pauze.present();
		WaitForButtonpress( button_enter ); # Wait for experimenter to continue
		
		# ask calibration
		t_eyeQuest.set_caption ("Wij drukken [SPATIE] voor oogkalibratie, [ENTER] voor verder.");
		t_eyeQuest.redraw();
		p_eyeQuest.present();
		WaitForEitherButtonpress( button_enter, button_spacebar );
		
		# Answer
		i_response_exp = 0;# "erase" any previous setting
		response_data response_exp = response_manager.last_response_data();
		i_response_exp = response_exp.button();
		
		if i_response_exp == button_spacebar then 
			eyeCalib();
		else# if enter was pressed, the experimenter does not want an eye calibration, [do nothing], move on
		end;
		
		countdown( outputfilename );
	end;
	
end; 

#######################final screen############################                                                       

sub EndFinalScreen begin
	
	# Show thank you/experiment is over screen and wait for button press (enter)
	p_end_1.present();
	WaitForButtonpress( button_enter );
end;  


########################## experiment ###############################
# Subroutine for looping through an input file (e.g., L01.txt) after
# training is completed.

sub runExp begin
	
	# fixation cross before first training trial	
	# lasts for 3 seconds
	fixation.present(); 
	Wait(3000); 

	# starting with the first trial
	iLines = 1;
	
	if ispilot then
		endpoint = 17;
	else
		endpoint = iNrTrials;
	end;
	
	# loop through all trials in input file, see subroutine for details
	loop until iLines > endpoint begin 
		RunTrials(); 								
		iLines = iLines + 1;
	end;
	
	s_beep.present();
	
end;

########################## training ###############################
# This is the subroutine for training in the scanner. Before the 
# experiment starts, Practice.txt (in Lists folder) gets called 
# automatically. Training is repeated until the subject chooses to
# quit training and start the experiment (with buttons specified 
# for "yes" (button 2) and "no" (button 3) in settings.

sub training begin
	
	expStarted = 0; # switch to tell us when training is over, needed in input file subroutine
	
	# Handling training input file
	InputfileHandlingTrain("Lists/Practice.txt");
	iNrTrials = iLines;
	InputlineSplitting();
	
	# Set switch to continue training as long as subject wants to
	contTraining = 1;
	
	# Present training instructions
	# Subject can press button to continue
	p_instr_training.present(); 
	WaitForButtonpress( button_yes ); 
	
	# repeat training until subject chooses to go on to experiment
	loop until contTraining == 0 begin 
	
		# starting with the first trial
		iLines = 1; 
		
		# fixation cross before first training trial
		# lasts for 3 seconds
		fixation.present(); 	
		Wait(3000); 
		
		# present all trials in Practice.txt
		loop until iLines > (iNrTrials) begin 
			RunTrials(); 							
			iLines = iLines + 1;
		end;
		
		# present a blank screen 
		default.present(); 
		
		# Ask if training should be continued
		p_training.present(); 
		
		# Loop to determine answer (yes or no)
		count_old_yes = response_manager.total_response_count(button_yes);
		count_old_no = response_manager.total_response_count(button_no);
		
		loop until response_manager.total_response_count(button_yes) > count_old_yes || response_manager.total_response_count(button_no) > count_old_no
		begin
			if response_manager.total_response_count(button_yes) > count_old_yes then
				contTraining = 1;
			elseif response_manager.total_response_count(button_no) > count_old_no then
				contTraining = 0;
			end;	
		end;		
		
	end;
	
	# Waits for Enter to go on to the next part (i.e., specifying the input list for the real experiment)
	p_aftertraining.present(); 
	WaitForButtonpress( button_yes );
	
	expStarted = 1;

end;
